/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RebalancerDeployer,
  RebalancerDeployerInterface,
} from "../RebalancerDeployer";

const _abi = [
  {
    inputs: [],
    name: "parameters",
    outputs: [
      {
        internalType: "address",
        name: "factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060a08061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80638903573014602d575b600080fd5b6000546001546046916001600160a01b03908116911682565b604080516001600160a01b0393841681529290911660208301520160405180910390f3fea2646970667358221220965aaa0cc0f9e4997de7ca36fafd91902e7f2eadd41df523802e0e3557f1366a64736f6c63430008060033";

export class RebalancerDeployer__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RebalancerDeployer> {
    return super.deploy(overrides || {}) as Promise<RebalancerDeployer>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): RebalancerDeployer {
    return super.attach(address) as RebalancerDeployer;
  }
  connect(signer: Signer): RebalancerDeployer__factory {
    return super.connect(signer) as RebalancerDeployer__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RebalancerDeployerInterface {
    return new utils.Interface(_abi) as RebalancerDeployerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RebalancerDeployer {
    return new Contract(address, _abi, signerOrProvider) as RebalancerDeployer;
  }
}
