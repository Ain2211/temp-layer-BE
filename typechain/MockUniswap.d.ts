/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MockUniswapInterface extends ethers.utils.Interface {
  functions: {
    "ONE()": FunctionFragment;
    "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "addLiquidityAmountA()": FunctionFragment;
    "addLiquidityAmountB()": FunctionFragment;
    "addLiquidityValue()": FunctionFragment;
    "factory()": FunctionFragment;
    "getPair(address,address)": FunctionFragment;
    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "removeLiquidityAmountA()": FunctionFragment;
    "removeLiquidityAmountB()": FunctionFragment;
    "setAddLiquidityValue(uint256,uint256,uint256)": FunctionFragment;
    "setPair(address,address,address)": FunctionFragment;
    "setRemoveLiquidityValue(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ONE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityAmountA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityAmountB",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityAmountA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityAmountB",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddLiquidityValue",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPair",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRemoveLiquidityValue",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ONE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityAmountA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityAmountB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityAmountA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityAmountB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddLiquidityValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRemoveLiquidityValue",
    data: BytesLike
  ): Result;

  events: {};
}

export class MockUniswap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockUniswapInterface;

  functions: {
    ONE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addLiquidity(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: string,
      arg7: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountA: BigNumber;
        amountB: BigNumber;
        liquidity: BigNumber;
      }
    >;

    addLiquidityAmountA(overrides?: CallOverrides): Promise<[BigNumber]>;

    addLiquidityAmountB(overrides?: CallOverrides): Promise<[BigNumber]>;

    addLiquidityValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getPair(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeLiquidity(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: string,
      arg6: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountA: BigNumber; amountB: BigNumber }
    >;

    removeLiquidityAmountA(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeLiquidityAmountB(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAddLiquidityValue(
      amountA: BigNumberish,
      amountB: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPair(
      token0: string,
      token1: string,
      pairAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRemoveLiquidityValue(
      amountA: BigNumberish,
      amountB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ONE(overrides?: CallOverrides): Promise<BigNumber>;

  addLiquidity(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BigNumberish,
    arg5: BigNumberish,
    arg6: string,
    arg7: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amountA: BigNumber;
      amountB: BigNumber;
      liquidity: BigNumber;
    }
  >;

  addLiquidityAmountA(overrides?: CallOverrides): Promise<BigNumber>;

  addLiquidityAmountB(overrides?: CallOverrides): Promise<BigNumber>;

  addLiquidityValue(overrides?: CallOverrides): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  getPair(
    token0: string,
    token1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  removeLiquidity(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BigNumberish,
    arg5: string,
    arg6: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amountA: BigNumber; amountB: BigNumber }
  >;

  removeLiquidityAmountA(overrides?: CallOverrides): Promise<BigNumber>;

  removeLiquidityAmountB(overrides?: CallOverrides): Promise<BigNumber>;

  setAddLiquidityValue(
    amountA: BigNumberish,
    amountB: BigNumberish,
    liquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPair(
    token0: string,
    token1: string,
    pairAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRemoveLiquidityValue(
    amountA: BigNumberish,
    amountB: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: string,
      arg7: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountA: BigNumber;
        amountB: BigNumber;
        liquidity: BigNumber;
      }
    >;

    addLiquidityAmountA(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidityAmountB(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidityValue(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    getPair(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    removeLiquidity(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: string,
      arg6: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountA: BigNumber; amountB: BigNumber }
    >;

    removeLiquidityAmountA(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidityAmountB(overrides?: CallOverrides): Promise<BigNumber>;

    setAddLiquidityValue(
      amountA: BigNumberish,
      amountB: BigNumberish,
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPair(
      token0: string,
      token1: string,
      pairAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRemoveLiquidityValue(
      amountA: BigNumberish,
      amountB: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    ONE(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: string,
      arg7: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addLiquidityAmountA(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidityAmountB(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidityValue(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getPair(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: string,
      arg6: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidityAmountA(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidityAmountB(overrides?: CallOverrides): Promise<BigNumber>;

    setAddLiquidityValue(
      amountA: BigNumberish,
      amountB: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPair(
      token0: string,
      token1: string,
      pairAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRemoveLiquidityValue(
      amountA: BigNumberish,
      amountB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ONE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidity(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: BigNumberish,
      arg6: string,
      arg7: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidityAmountA(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidityAmountB(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addLiquidityValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPair(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      arg5: string,
      arg6: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityAmountA(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidityAmountB(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAddLiquidityValue(
      amountA: BigNumberish,
      amountB: BigNumberish,
      liquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPair(
      token0: string,
      token1: string,
      pairAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRemoveLiquidityValue(
      amountA: BigNumberish,
      amountB: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
