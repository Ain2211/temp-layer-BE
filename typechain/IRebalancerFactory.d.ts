/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IRebalancerFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createRebalancerV2(address,address,uint24,address,address)": FunctionFragment;
    "quoter()": FunctionFragment;
    "rebalancerFee()": FunctionFragment;
    "setBlockFrequencySummarization(uint256)": FunctionFragment;
    "setRebalanceFee(uint256,uint256)": FunctionFragment;
    "summarizationFrequency()": FunctionFragment;
    "uniswapV3Factory()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createRebalancerV2",
    values: [string, string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "quoter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebalancerFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBlockFrequencySummarization",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebalanceFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "summarizationFrequency",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3Factory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createRebalancerV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quoter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebalancerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlockFrequencySummarization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRebalanceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "summarizationFrequency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3Factory",
    data: BytesLike
  ): Result;

  events: {
    "BlockFrequencySummarizationChanged(uint256,uint256)": EventFragment;
    "RebalancerCreated(address,address,uint24,address,address)": EventFragment;
    "RebalancerFeeChanged(tuple,uint256,uint256)": EventFragment;
    "RebalancerV2Created(address,address,uint24,address,address)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "BlockFrequencySummarizationChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebalancerCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebalancerFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebalancerV2Created"): EventFragment;
}

export class IRebalancerFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRebalancerFactoryInterface;

  functions: {
    createRebalancerV2(
      tokenA: string,
      tokenB: string,
      fee: BigNumberish,
      nft: string,
      swapRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    quoter(overrides?: CallOverrides): Promise<[string]>;

    rebalancerFee(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;

    setBlockFrequencySummarization(
      _summarizationFrequency: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRebalanceFee(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    summarizationFrequency(overrides?: CallOverrides): Promise<[BigNumber]>;

    uniswapV3Factory(overrides?: CallOverrides): Promise<[string]>;
  };

  createRebalancerV2(
    tokenA: string,
    tokenB: string,
    fee: BigNumberish,
    nft: string,
    swapRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  quoter(overrides?: CallOverrides): Promise<string>;

  rebalancerFee(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
  >;

  setBlockFrequencySummarization(
    _summarizationFrequency: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRebalanceFee(
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  summarizationFrequency(overrides?: CallOverrides): Promise<BigNumber>;

  uniswapV3Factory(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createRebalancerV2(
      tokenA: string,
      tokenB: string,
      fee: BigNumberish,
      nft: string,
      swapRouter: string,
      overrides?: CallOverrides
    ): Promise<string>;

    quoter(overrides?: CallOverrides): Promise<string>;

    rebalancerFee(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;

    setBlockFrequencySummarization(
      _summarizationFrequency: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRebalanceFee(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    summarizationFrequency(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV3Factory(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    BlockFrequencySummarizationChanged(
      oldSummarizationFrequency?: null,
      newSummarizationFrequency?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      {
        oldSummarizationFrequency: BigNumber;
        newSummarizationFrequency: BigNumber;
      }
    >;

    RebalancerCreated(
      tokenA?: string | null,
      tokenB?: string | null,
      fee?: BigNumberish | null,
      pool?: null,
      rebalancer?: null
    ): TypedEventFilter<
      [string, string, number, string, string],
      {
        tokenA: string;
        tokenB: string;
        fee: number;
        pool: string;
        rebalancer: string;
      }
    >;

    RebalancerFeeChanged(
      oldFee?: null,
      numeratorNew?: null,
      denominatorNew?: null
    ): TypedEventFilter<
      [
        [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        },
        BigNumber,
        BigNumber
      ],
      {
        oldFee: [BigNumber, BigNumber] & {
          numerator: BigNumber;
          denominator: BigNumber;
        };
        numeratorNew: BigNumber;
        denominatorNew: BigNumber;
      }
    >;

    RebalancerV2Created(
      tokenA?: string | null,
      tokenB?: string | null,
      fee?: BigNumberish | null,
      pool?: null,
      rebalancer?: null
    ): TypedEventFilter<
      [string, string, number, string, string],
      {
        tokenA: string;
        tokenB: string;
        fee: number;
        pool: string;
        rebalancer: string;
      }
    >;
  };

  estimateGas: {
    createRebalancerV2(
      tokenA: string,
      tokenB: string,
      fee: BigNumberish,
      nft: string,
      swapRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    quoter(overrides?: CallOverrides): Promise<BigNumber>;

    rebalancerFee(overrides?: CallOverrides): Promise<BigNumber>;

    setBlockFrequencySummarization(
      _summarizationFrequency: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRebalanceFee(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    summarizationFrequency(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV3Factory(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    createRebalancerV2(
      tokenA: string,
      tokenB: string,
      fee: BigNumberish,
      nft: string,
      swapRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    quoter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalancerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBlockFrequencySummarization(
      _summarizationFrequency: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRebalanceFee(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    summarizationFrequency(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniswapV3Factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
